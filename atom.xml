<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SilvesterHsu</title>
  
  
  <link href="https://silvesterhsu.github.io/atom.xml" rel="self"/>
  
  <link href="https://silvesterhsu.github.io/"/>
  <updated>2025-03-08T15:59:50.920Z</updated>
  <id>https://silvesterhsu.github.io/</id>
  
  <author>
    <name>SilvesterHsu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从源码构建 Jetson-Perf：一步步指南</title>
    <link href="https://silvesterhsu.github.io/2025/02/17/%E4%BB%8E%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BAJetson-Perf/"/>
    <id>https://silvesterhsu.github.io/2025/02/17/%E4%BB%8E%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BAJetson-Perf/</id>
    <published>2025-02-17T14:22:51.000Z</published>
    <updated>2025-03-08T15:59:50.920Z</updated>
    
    <content type="html"><![CDATA[<p>在 NVIDIA Jetson 平台上进行性能分析时，perf 工具是不可或缺的利器。然而，由于硬件架构和内核版本的特殊性，直接使用预编译版本可能无法完全满足需求。本文将从源码开始，详细介绍如何在 Jetson Orin 和 X86 平台上构建 perf 工具，并解决编译过程中可能遇到的常见问题。</p><hr><h2 id="一、准备工作：源码下载"><a href="#一、准备工作：源码下载" class="headerlink" title="一、准备工作：源码下载"></a>一、准备工作：源码下载</h2><h3 id="Jetson-Orin-平台"><a href="#Jetson-Orin-平台" class="headerlink" title="Jetson Orin 平台"></a>Jetson Orin 平台</h3><ol><li><strong>下载 L4T 驱动包</strong><br>访问 <a href="https://developer.nvidia.com/embedded/downloads/">NVIDIA 开发者下载中心</a>，搜索 <strong>Jetson Linux Driver Package (L4T)</strong>，选择与设备匹配的版本（如 R35.x 系列）。<br>[注：需根据 Jetson 型号选择对应的版本，参考下图中的版本号。]<br><img src="/images/Jetson_L4T.png"></li><li><strong>获取 BSP 源码</strong><br>下载完成后，找到 <code>public_sources.tbz2</code> 文件，这是构建内核和工具链所需的基础源码包。<br><img src="/images/BSP.png"></li></ol><br><h3 id="Orin-Drive-平台"><a href="#Orin-Drive-平台" class="headerlink" title="Orin Drive 平台"></a>Orin Drive 平台</h3><ol><li><p><strong>查看当前系统的核版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure></li><li><p><strong>下载内核源码</strong><br>访问 <a href="https://mirrors.edge.kernel.org/pub/linux/kernel/">Linux 内核镜像站</a>，根据当前系统内核版本下载对应的源码包。<br>例如：若内核版本为 <code>5.15.116-rt-tegra</code>，则下载 <code>linux-5.15.116.tar.gz</code>。</p></li></ol><br><h3 id="X86-平台"><a href="#X86-平台" class="headerlink" title="X86 平台"></a>X86 平台</h3><ol><li><p><strong>查看当前系统的核版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure></li><li><p><strong>下载内核源码</strong><br>访问 <a href="https://mirrors.edge.kernel.org/pub/linux/kernel/">Linux 内核镜像站</a>，根据当前系统内核版本下载对应的源码包。<br>例如：若内核版本为 <code>5.10.0</code>，则下载 <code>linux-5.10.tar.gz</code>。</p></li></ol><br><h2 id="二、源码编译步骤"><a href="#二、源码编译步骤" class="headerlink" title="二、源码编译步骤"></a>二、源码编译步骤</h2><h3 id="编译环境准备"><a href="#编译环境准备" class="headerlink" title="编译环境准备"></a>编译环境准备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install make gcc flex bison pkg-config -y</span><br></pre></td></tr></table></figure><br><h3 id="Jetson-Orin-编译流程"><a href="#Jetson-Orin-编译流程" class="headerlink" title="Jetson Orin 编译流程"></a>Jetson Orin 编译流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tar -xjvf public_sources.tbz2 &amp;&amp; \</span><br><span class="line"><span class="built_in">cd</span> Linux_for_Tegra/source/public &amp;&amp; \</span><br><span class="line"></span><br><span class="line">tar -xjvf kernel_src.tbz2 &amp;&amp; \</span><br><span class="line"><span class="built_in">cd</span> kernel/kernel-5.10/tools/perf &amp;&amp; \</span><br><span class="line"></span><br><span class="line">make -j$(<span class="built_in">nproc</span>) &amp;&amp; \</span><br><span class="line"><span class="built_in">sudo</span> make install &amp;&amp; \</span><br><span class="line"></span><br><span class="line">./perf --version</span><br></pre></td></tr></table></figure><br><h3 id="Orin-Drive-编译流程"><a href="#Orin-Drive-编译流程" class="headerlink" title="Orin Drive 编译流程"></a>Orin Drive 编译流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf linux-5.15.116.tar.gz &amp;&amp; \</span><br><span class="line"><span class="built_in">cd</span> linux-5.15.116/tools/perf &amp;&amp; \</span><br><span class="line"></span><br><span class="line">make -j$(<span class="built_in">nproc</span>) &amp;&amp; \</span><br><span class="line"><span class="built_in">sudo</span> make install &amp;&amp; \</span><br><span class="line"></span><br><span class="line">./perf --version</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h3 id="X86-平台编译流程"><a href="#X86-平台编译流程" class="headerlink" title="X86 平台编译流程"></a>X86 平台编译流程</h3><ol><li><p><strong>安装依赖项</strong><br>X86 平台需安装以下开发库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install build-essential flex bison python3 python3-dev \</span><br><span class="line">  libelf-dev libnewt-dev libdw-dev libaudit-dev libiberty-dev \</span><br><span class="line">  libunwind-dev libcap-dev libzstd-dev libnuma-dev libssl-dev \</span><br><span class="line">  binutils-dev gcc-multilib liblzma-dev</span><br></pre></td></tr></table></figure></li><li><p><strong>编译 perf</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf linux-5.10.tar.gz &amp;&amp; \</span><br><span class="line"><span class="built_in">cd</span> linux-5.10/tools/perf &amp;&amp; \</span><br><span class="line"></span><br><span class="line">make -j$(<span class="built_in">nproc</span>) &amp;&amp; \</span><br><span class="line"><span class="built_in">sudo</span> make install &amp;&amp; \</span><br><span class="line"></span><br><span class="line">./perf --version</span><br></pre></td></tr></table></figure></li></ol><br><h2 id="三、开启内核调试支持"><a href="#三、开启内核调试支持" class="headerlink" title="三、开启内核调试支持"></a>三、开启内核调试支持</h2><p>默认情况下，Linux 内核会限制 <code>perf</code> 的权限。通过以下命令解除限制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sysctl kernel.perf_event_paranoid=-1</span><br></pre></td></tr></table></figure><p>将此设置永久生效，可将其写入 <code>/etc/sysctl.conf</code>。</p><br><h2 id="四、通过-perf-生成火焰图：直观分析性能瓶颈"><a href="#四、通过-perf-生成火焰图：直观分析性能瓶颈" class="headerlink" title="四、通过 perf 生成火焰图：直观分析性能瓶颈"></a>四、通过 <code>perf</code> 生成火焰图：直观分析性能瓶颈</h2><p>火焰图（Flame Graph）是性能分析的利器，它能以可视化方式展示程序的函数调用栈和资源占用情况。结合 <code>perf</code> 工具，我们可以快速生成火焰图，精准定位性能瓶颈。以下是详细操作步骤：</p><h3 id="1-安装火焰图生成工具"><a href="#1-安装火焰图生成工具" class="headerlink" title="1. 安装火焰图生成工具"></a>1. 安装火焰图生成工具</h3><p>首先需要克隆 Brendan Gregg 的 <strong>FlameGraph</strong> 工具库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/brendangregg/FlameGraph.git</span><br><span class="line"><span class="built_in">cd</span> FlameGraph</span><br></pre></td></tr></table></figure><p>将此工具的路径加入环境变量，或直接通过绝对路径调用脚本（如 <code>./FlameGraph/stackcollapse-perf.pl</code>）。</p><h3 id="2-使用-perf-采集性能数据"><a href="#2-使用-perf-采集性能数据" class="headerlink" title="2. 使用 perf 采集性能数据"></a>2. 使用 <code>perf</code> 采集性能数据</h3><p>运行目标程序，并通过 <code>perf record</code> 记录性能事件（如 CPU 周期、缓存失效等）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监控 CPU 使用情况（默认）</span></span><br><span class="line"><span class="built_in">sudo</span> perf record -F 99 -a -g -- <span class="built_in">sleep</span> 60</span><br><span class="line"><span class="comment"># 或监控特定进程</span></span><br><span class="line"><span class="built_in">sudo</span> perf record -F 99 -p &lt;PID&gt; -g -- <span class="built_in">sleep</span> 30</span><br><span class="line"><span class="comment"># 或监控具体程序</span></span><br><span class="line"><span class="built_in">sudo</span> perf record -F 99 -g ./&lt;MY_PROGRAM&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>参数说明</strong>：<ul><li><code>-F 99</code>：采样频率为 99 Hz（避免与某些内核频率冲突）。</li><li><code>-a</code>：监控所有 CPU。</li><li><code>-g</code>：记录调用栈（生成火焰图必需）。</li><li><code>-- sleep 60</code>：持续采样 60 秒。</li></ul></li></ul><h3 id="3-生成火焰图"><a href="#3-生成火焰图" class="headerlink" title="3. 生成火焰图"></a>3. 生成火焰图</h3><p>采集完成后，按以下步骤处理数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成 perf.data 的解析文本</span></span><br><span class="line"><span class="built_in">sudo</span> perf script &gt; out.perf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 折叠调用栈（关键步骤）</span></span><br><span class="line">./FlameGraph/stackcollapse-perf.pl out.perf &gt; out.folded</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 SVG 格式火焰图</span></span><br><span class="line">./FlameGraph/flamegraph.pl out.folded &gt; flamegraph.svg</span><br></pre></td></tr></table></figure><h3 id="4-查看与分析火焰图"><a href="#4-查看与分析火焰图" class="headerlink" title="4. 查看与分析火焰图"></a>4. 查看与分析火焰图</h3><p>用浏览器打开 <code>flamegraph.svg</code>，可以看到类似下图的交互式可视化结果：<br><img src="/images/perf.jpg"></p><p><strong>火焰图解读技巧</strong>：</p><ul><li><strong>横向宽度</strong>：表示函数或代码路径的资源（如 CPU 时间）占用比例。</li><li><strong>纵向层级</strong>：表示函数调用栈的深度，顶层是正在执行的函数，下层是调用者。</li><li><strong>点击缩放</strong>：支持点击任意区块展开查看细节。</li><li><strong>高亮搜索</strong>：按 <code>Ctrl + F</code> 搜索关键函数名。</li></ul><br><h2 id="五、常见问题解决（FAQ）"><a href="#五、常见问题解决（FAQ）" class="headerlink" title="五、常见问题解决（FAQ）"></a>五、常见问题解决（FAQ）</h2><h3 id="Q1：编译时提示某些-Feature-未启用"><a href="#Q1：编译时提示某些-Feature-未启用" class="headerlink" title="Q1：编译时提示某些 Feature 未启用"></a>Q1：编译时提示某些 Feature 未启用</h3><p><strong>问题现象</strong><br>编译过程中出现 <code>WARNING: ... missing xxx,某些功能将被禁用</code>。<br><img src="/images/perf_feature.png"></p><p><strong>解决方法</strong></p><ol><li><p>查看具体错误日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ../build/feature/test-libunwind.make.output</span><br></pre></td></tr></table></figure><p><img src="/images/perf_error.jpg"></p></li><li><p>根据缺失的依赖安装对应开发库。<br>安装<code>elf</code>即可<code>sudo apt install -y libelf-dev</code>，其余Feature开启方法同理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y libelf-dev</span><br><span class="line"><span class="built_in">sudo</span> apt install libunwind-dev</span><br><span class="line"><span class="built_in">sudo</span> apt install -y libdw1</span><br><span class="line"><span class="built_in">sudo</span> apt install -y elfutils</span><br><span class="line"><span class="built_in">sudo</span> apt install -y libdw-dev</span><br><span class="line"><span class="built_in">sudo</span> apt install -y binutils-dev</span><br></pre></td></tr></table></figure></li></ol><h3 id="Q2：运行-perf-时权限不足"><a href="#Q2：运行-perf-时权限不足" class="headerlink" title="Q2：运行 perf 时权限不足"></a>Q2：运行 perf 时权限不足</h3><p>若未设置 <code>kernel.perf_event_paranoid</code>，需通过 <code>sudo</code> 运行 <code>perf</code>，或按第三步永久解除限制。</p><br><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>通过从源码构建 <code>perf</code> 工具，可以确保其与当前内核版本的完全兼容性，并启用所有高级功能。如果在编译中遇到问题，请优先检查依赖项和错误日志，大多数问题均可通过安装缺失的库解决。</p><hr><p><strong>效果验证</strong><br>成功编译后，运行 <code>perf list</code> 可查看支持的性能监控事件。尝试使用 <code>perf stat</code> 或 <code>perf record</code> 分析程序性能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 NVIDIA Jetson 平台上进行性能分析时，perf 工具是不可或缺的利器。然而，由于硬件架构和内核版本的特殊性，直接使用预编译版本可能无法完全满足需求。本文将从源码开始，详细介绍如何在 Jetson Orin 和 X86 平台上构建 perf 工具，并解决编译过</summary>
      
    
    
    
    <category term="blog" scheme="https://silvesterhsu.github.io/categories/blog/"/>
    
    
    <category term="Orin" scheme="https://silvesterhsu.github.io/tags/Orin/"/>
    
    <category term="性能分析" scheme="https://silvesterhsu.github.io/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
